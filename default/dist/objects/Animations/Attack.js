"use strict";import{GameObject as d}from"../../GameObject.js";import{Vector2 as s}from"../../Vector2.js";import{LEFT as f,RIGHT as p,UP as u,DOWN as l}from"../../Input.js";import{Sprite as y}from"../../Sprite.js";import{resources as h}from"../../Resource.js";import{Animations as b}from"../../Animations.js";import{FrameIndexPattern as a}from"../../FrameIndexPattern.js";import{ATTACK_DOWN as w,ATTACK_LEFT as k,ATTACK_RIGHT as A,ATTACK_UP as S}from"../Hero/heroAnimations.js";import{SaveGame as D}from"../../SaveGame.js";export class Attack extends d{constructor(t,n="sword"){super(new s(0,0));this.lifetime=400;this.facingDirection=t,this.drawLayer="FLOOR",this.body=new y({resource:h.images[n],position:new s(-8,-8),frameSize:new s(32,32),hFrames:6,vFrames:4,frame:1,animations:new b({attackDown:new a(w),attackRight:new a(A),attackUp:new a(S),attackLeft:new a(k)})}),this.addChild(this.body);const e=Attack.attackSlices[Attack.sliceIndex];if(e&&D.loadSound()==="on"&&this.playSoundSlice(e[0],e[1]),Attack.sliceIndex=(Attack.sliceIndex+1)%Attack.attackSlices.length,this.body.animations){switch(this.facingDirection){case f:this.body.animations.play("attackLeft");break;case p:this.body.animations.play("attackRight");break;case u:this.body.animations.play("attackUp");break;case l:this.body.animations.play("attackDown");break}return}}static{this.attackSlices=[[.2,.6],[3,3.4],[5.6,6]]}static{this.sliceIndex=0}step(t){this.lifetime-=t,this.lifetime<=0&&this.destroy()}destroy(){super.destroy()}async playSoundSlice(t,n){const c=await(await fetch("./sounds/items/sword_attack01.mp3")).arrayBuffer(),i=new AudioContext,m=await i.decodeAudioData(c),o=i.createBufferSource();o.buffer=m;const r=i.createGain();r.gain.value=.2,o.connect(r),r.connect(i.destination),o.start(0,t,n-t)}}
