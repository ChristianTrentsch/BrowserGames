"use strict";import{GameObject as u}from"../../GameObject.js";import{Camera as h}from"../../Camera.js";import{Input as v}from"../../Input.js";import{Inventory as f}from"../Inventory/Inventory.js";import{events as s,CHANGE_LEVEL as c,HERO_REQUESTS_ACTION as x,TEXTBOX_START as R,TEXTBOX_END as g,HERO_ATTACK_ACTION as C}from"../../Events.js";import{SpriteTextString as T}from"../SpriteTextString/SpriteTextString.js";import{Vector2 as y}from"../../Vector2.js";import{SaveGame as a}from"../../SaveGame.js";import{Equipment as E}from"../Equipment/Equipment.js";import{storyFlags as m}from"../../StoryFlags.js";import{Npc as S}from"../Npc/Npc.js";import{gridCells as p}from"../../helpers/grid.js";import{Exp as _}from"../Exp/Exp.js";export class Main extends u{constructor(e){super(e),this.level=null,this.input=new v,this.camera=new h(new y(0,0)),this.savedResources=[]}ready(){const e=new f;this.addChild(e);const o=new E;this.addChild(o);const r=new _;this.addChild(r),s.on(c,this,t=>{a.saveLevel(t.levelId),this.setLevel(t)}),s.on(x,this,t=>{if(typeof t.getContent!="function")return;if(t instanceof S){const i=t.getContent()?.storyFlag??null;switch(i){case"STORY_01_PART_01":e.completeQuest([{name:"tree",amount:5}])&&(m.add(i),t.position.x+=p(-1));break;case"STORY_02_PART_01":e.completeQuest([{name:"tree",amount:25},{name:"bush",amount:20},{name:"stone",amount:10}])&&(m.add(i),t.position.x+=p(-1));break;default:break}}const n=t.getContent();if(!n)return;const l=new T(n.portraitFrame,n.string);this.addChild(l),s.emit(R);const d=s.on(g,this,()=>{l.destroy(),s.off(d)})}),s.on(C,this,t=>{t.healthPoints-=o.getActiveDamage(),t.healthPoints<=0&&(t.healthPoints=0),this.level&&(this.pushResource(t),a.saveResources(this.level.levelId,this.savedResources))})}pushResource(e){const o=this.savedResources.find(r=>r.type===e.type&&r.x===e.position.x&&r.y===e.position.y);o?o.hp=e.healthPoints:this.savedResources.push({type:e.type,x:e.position.x,y:e.position.y,hp:e.healthPoints})}setLevel(e){this.level&&this.level.destroy(),this.level=e,this.addChild(this.level),this.savedResources=a.loadResources(this.level.levelId)??[]}drawBackground(e){this.level&&this.level.background.drawImage(e,this.level.background.position.x,this.level.background.position.x)}drawObjects(e){this.children.forEach(o=>{o.drawLayer!=="HUD"&&o.draw(e,o.position.x,o.position.x)})}drawForeground(e){this.children.forEach(o=>{o.drawLayer==="HUD"&&o.draw(e,o.position.x,o.position.x)})}}
