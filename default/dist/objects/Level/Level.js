"use strict";import{GameObject as a}from"../../GameObject.js";import{SaveGame as d}from"../../SaveGame.js";export class Level extends a{constructor(o,t,e=.5){super(o),t&&(this.backgroundSound=new Audio(t),this.backgroundSound.loop=!0,this.backgroundSound.volume=e)}initBackgroundSound(){d.loadSound()==="on"?this.playBackgroundSound():this.stopBackgroundSound()}playBackgroundSoundFadeIn(o=1e3){if(this.backgroundSound){this.backgroundSound.volume=0,this.backgroundSound.play().catch(u=>console.warn(u));let t=.05,e=o/(1/t),r=setInterval(()=>{this.backgroundSound.volume<1?this.backgroundSound.volume=Math.min(1,this.backgroundSound.volume+t):clearInterval(r)},e)}}stopBackgroundSoundFadeOut(o=1e3){if(this.backgroundSound){let t=.05,e=o/(1/t),r=setInterval(()=>{this.backgroundSound.volume>0?this.backgroundSound.volume=Math.max(0,this.backgroundSound.volume-t):(clearInterval(r),this.backgroundSound.pause(),this.backgroundSound.currentTime=0)},e)}}playBackgroundSound(){this.backgroundSound&&this.backgroundSound.play().catch(o=>console.warn("Sound konnte nicht abgespielt werden:",o))}stopBackgroundSound(){this.backgroundSound&&this.backgroundSound.pause()}generateWall(o,t,e,r){const u=[];switch(r){case"top":case"bottom":for(let n=o.x;n<=t.x;n+=e)u.push(`${n},${o.y}`);break;case"left":case"right":for(let n=o.y;n<=t.y;n+=e)u.push(`${o.x},${n}`);break}return u}}
