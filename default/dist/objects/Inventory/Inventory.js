"use strict";import{GameObject as n,HUD as a}from"../../GameObject.js";import{resources as s}from"../../Resource.js";import{Sprite as y}from"../../Sprite.js";import{Vector2 as m}from"../../Vector2.js";import{events as h,HERO_PICKS_UP_ITEM as d}from"../../Events.js";import{SaveGame as o}from"../../SaveGame.js";export class Inventory extends n{constructor(){super(new m(0,1)),this.drawLayer=a,this.nextId=0,this.items=o.loadInventory().map(e=>({...e,image:s.images[e.imageKey]})),this.items.length>0&&(this.nextId=Math.max(...this.items.map(e=>e.id))),this.renderInventory()}ready(){h.on(d,this,e=>{const{imageKey:t}=e;if(this.items.some(i=>i.imageKey===t)){console.warn(`Item ${t} ist bereits im Inventar`);return}this.nextId+=1,this.items.push({id:this.nextId,image:s.images[t],imageKey:t}),o.saveInventory(this.items.map(i=>({id:i.id,imageKey:i.imageKey}))),this.renderInventory()})}renderInventory(){this.children.forEach(e=>e.destroy()),this.items.forEach((e,t)=>{const r=new y({resource:s.images[e.imageKey],position:new m(t*12,0)});this.addChild(r)})}removeFromInventory(e){this.items=this.items.filter(t=>t.imageKey!==e),this.renderInventory()}}
