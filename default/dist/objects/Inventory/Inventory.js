"use strict";import{GameObject as p}from"../../GameObject.js";import{resources as r}from"../../Resource.js";import{Sprite as s}from"../../Sprite.js";import{Vector2 as m}from"../../Vector2.js";import{events as y,HERO_PICKS_UP_ITEM as l,HERO_USE_ITEM as K}from"../../Events.js";import{SaveGame as a}from"../../SaveGame.js";import{getCharacterFrame as b,getCharacterWidth as x}from"../SpriteTextString/spriteFontMap.js";export const INVENTORY_ITEMS=["treeResource","stoneResource","bushResource"];export class Inventory extends p{constructor(){if(super(new m(1,1)),this.drawLayer="HUD",this.nextId=0,this.items=a.loadInventory().map(n=>({...n,image:r.images[n.imageKey]})),this.items.length>0){const n=this.items.find(e=>INVENTORY_ITEMS.includes(e.imageKey));n&&(n.amount+=1),this.nextId=Math.max(...this.items.map(e=>e.id))}this.renderInventory()}ready(){y.on(l,this,n=>{const{imageKey:e}=n,i=this.items.find(t=>t.imageKey===e);i?INVENTORY_ITEMS.includes(i.imageKey)&&(i.amount+=1):INVENTORY_ITEMS.includes(e)&&(this.nextId+=1,this.items.push({id:this.nextId,image:r.images[e],imageKey:e,amount:1})),a.saveInventory(this.items.map(t=>({id:t.id,imageKey:t.imageKey,amount:t.amount}))),this.renderInventory()}),y.on(K,this,n=>{const{imageKey:e}=n;this.removeFromInventory(e)})}renderInventory(){this.children.forEach(e=>e.destroy()),this.items.filter(e=>e.amount>0).forEach((e,i)=>{const t=i*25,o=0,h=new s({resource:r.images.inventoryItemFrame,position:new m(t-.01,o-.01),frameSize:new m(24,24)});this.addChild(h);const I=new s({resource:r.images[e.imageKey],position:new m(t+4,o+4)});if(this.addChild(I),e.amount>1){const d=String(e.amount);let u=t+8;const f=o+12;for(const c of d){const g=x(c),v=new s({position:new m(u,f),resource:r.images.fontWhite,hFrames:13,vFrames:6,frame:b(c)});this.addChild(v),u+=g+1}}})}removeFromInventory(n){this.items=this.items.filter(e=>e.imageKey!==n),this.renderInventory()}hasResource(n,e){const i=this.items.find(t=>t.imageKey===n);return!!i&&i.amount>=e}removeResource(n,e){const i=this.items.find(t=>t.imageKey===n);i&&(i.amount-=e,i.amount<=0&&(i.amount=0),this.items.sort((t,o)=>t.amount===0&&o.amount>0?1:t.amount>0&&o.amount===0?-1:0),a.saveInventory(this.items.map(t=>({id:t.id,imageKey:t.imageKey,amount:t.amount}))),this.renderInventory())}completeQuest(n){return n.every(i=>this.hasResource(i.imageKey,i.amount))?(n.forEach(i=>this.removeResource(i.imageKey,i.amount)),!0):!1}}
