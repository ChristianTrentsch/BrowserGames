"use strict";import{GameObject as m,HUD as a}from"../../GameObject.js";import{resources as i}from"../../Resource.js";import{Sprite as y}from"../../Sprite.js";import{Vector2 as r}from"../../Vector2.js";import{events as o,HERO_PICKS_UP_ITEM as h,HERO_USE_ITEM as I}from"../../Events.js";export const inventoryStorageKey="inventory";export class Inventory extends m{constructor(){super(new r(0,1)),this.drawLayer=a,this.nextId=0,this.items=[],this.loadInventory(),this.items.length>0&&(this.nextId=Math.max(...this.items.map(e=>e.id))),this.renderInventory()}ready(){o.on(h,this,e=>{const{imageKey:t}=e;if(this.items.some(n=>n.imageKey===t)){console.warn(`Item ${t} ist bereits im Inventar`);return}this.nextId+=1,this.items.push({id:this.nextId,image:i.images[t],imageKey:t}),this.saveInventory(),this.renderInventory()}),o.on(I,this,e=>{const{imageKey:t}=e;this.loadInventory(),this.removeFromInventory(t)})}renderInventory(){this.children.forEach(e=>e.destroy()),this.items.forEach((e,t)=>{const s=new y({resource:i.images[e.imageKey],position:new r(t*12,0)});this.addChild(s)})}removeFromInventory(e){this.items=this.items.filter(t=>t.imageKey!==e),this.renderInventory()}saveInventory(){localStorage.setItem(inventoryStorageKey,JSON.stringify(this.items))}loadInventory(){const e=localStorage.getItem(inventoryStorageKey);e&&(this.items=JSON.parse(e))}}
