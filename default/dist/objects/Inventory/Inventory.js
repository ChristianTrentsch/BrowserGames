"use strict";import{GameObject as E}from"../../GameObject.js";import{resources as a}from"../../Resource.js";import{Sprite as h}from"../../Sprite.js";import{Vector2 as r}from"../../Vector2.js";import{events as I,HERO_PICKS_UP_ITEM as S,HERO_USE_ITEM as U}from"../../Events.js";import{SaveGame as u}from"../../SaveGame.js";import{getCharacterFrame as g,getCharacterWidth as w}from"../SpriteTextString/spriteFontMap.js";import{TREE as R,STONE as F,BUSH as O,Item as T}from"../Item/Item.js";export const INVENTORY_ITEMS=[R,F,O];export class Inventory extends E{constructor(){if(super(new r(1,1)),this.drawLayer="HUD",this.nextId=0,this.items=u.loadInventory(),this.items.length>0){const o=this.items.find(e=>INVENTORY_ITEMS.includes(e.name));o&&(o.amount+=1),this.nextId=Math.max(...this.items.map(e=>e.id))}this.renderInventory()}ready(){I.on(S,this,o=>{const{name:e}=o,t=this.items.find(n=>n.name===e);t&&INVENTORY_ITEMS.includes(t.name)?t.amount+=1:!t&&INVENTORY_ITEMS.includes(e)&&(this.nextId+=1,this.items.push({id:this.nextId,name:e,amount:1})),u.saveInventory(this.items.map(n=>({id:n.id,name:n.name,amount:n.amount}))),this.renderInventory()}),I.on(U,this,o=>{const{name:e}=o;this.removeFromInventory(e)})}renderInventory(){this.children.forEach(e=>e.destroy()),this.items.filter(e=>e.amount>0).forEach((e,t)=>{const m=t*24,s=0,f=new h({resource:a.images.inventoryItemFrame,position:new r(m,s-.01),frameSize:new r(24,24)});this.addChild(f);const v=T.getCollectibleItemFrame(e.name),l=new h({resource:a.images.collectible,position:new r(m+4,s+4),hFrames:20,frame:v});if(this.addChild(l),e.amount>1){const y=String(e.amount);let c=m+8;const p=s+12;for(const d of y){const b=w(d),x=new h({position:new r(c,p),resource:a.images.fontWhite,hFrames:13,vFrames:6,frame:g(d)});this.addChild(x),c+=b+1}}})}removeFromInventory(o){this.items=this.items.filter(e=>e.name!==o),this.renderInventory()}hasResource(o,e){const t=this.items.find(n=>n.name===o);return!!t&&t.amount>=e}removeResource(o,e){const t=this.items.find(n=>n.name===o);t&&(t.amount-=e,t.amount<=0&&(t.amount=0),this.items.sort((n,i)=>n.amount===0&&i.amount>0?1:n.amount>0&&i.amount===0?-1:0),u.saveInventory(this.items.map(n=>({id:n.id,name:n.name,amount:n.amount}))),this.renderInventory())}completeQuest(o){return o.every(t=>this.hasResource(t.name,t.amount))?(o.forEach(t=>this.removeResource(t.name,t.amount)),!0):!1}}
