"use strict";import{GameObject as p}from"../../GameObject.js";import{resources as o}from"../../Resource.js";import{Sprite as s}from"../../Sprite.js";import{Vector2 as n}from"../../Vector2.js";import{events as h,HERO_PICKS_UP_ITEM as v,HERO_USE_ITEM as K}from"../../Events.js";import{SaveGame as y}from"../../SaveGame.js";import{getCharacterFrame as x,getCharacterWidth as l}from"../SpriteTextString/spriteFontMap.js";export class Inventory extends p{constructor(){if(super(new n(1,1)),this.drawLayer="HUD",this.nextId=0,this.items=y.loadInventory().map(e=>({...e,image:o.images[e.imageKey]})),this.items.length>0){const e=this.items.find(t=>t.imageKey==="treeRessource");e&&(e.amount+=1),this.nextId=Math.max(...this.items.map(t=>t.id))}this.renderInventory()}ready(){h.on(v,this,e=>{const{imageKey:t}=e,i=this.items.find(r=>r.imageKey===t);i?i.imageKey==="treeRessource"&&(i.amount+=1):(this.nextId+=1,this.items.push({id:this.nextId,image:o.images[t],imageKey:t,amount:1})),y.saveInventory(this.items.map(r=>({id:r.id,imageKey:r.imageKey,amount:r.amount}))),this.renderInventory()}),h.on(K,this,e=>{const{imageKey:t}=e;this.removeFromInventory(t)})}renderInventory(){this.children.forEach(e=>e.destroy()),this.items.forEach((e,t)=>{const i=t*25,r=0,c=new s({resource:o.images.inventoryItemFrame,position:new n(i-.01,r-.01),frameSize:new n(24,24)});this.addChild(c);const d=new s({resource:o.images[e.imageKey],position:new n(i+4,r+4)});if(this.addChild(d),e.amount>1){const g=String(e.amount);let m=i+8;const I=r+12;for(const a of g){const u=l(a),f=new s({position:new n(m,I),resource:o.images.fontWhite,hFrames:13,vFrames:6,frame:x(a)});this.addChild(f),m+=u+1}}})}removeFromInventory(e){this.items=this.items.filter(t=>t.imageKey!==e),this.renderInventory()}}
