"use strict";import{GameObject as a,HUD as y}from"../../GameObject.js";import{resources as r}from"../../Resource.js";import{Sprite as I}from"../../Sprite.js";import{Vector2 as m}from"../../Vector2.js";import{events as n,HERO_PICKS_UP_ITEM as d,HERO_USE_ITEM as h}from"../../Events.js";import{SaveGame as s}from"../../SaveGame.js";export class Inventory extends a{constructor(){super(new m(0,1)),this.drawLayer=y,this.nextId=0,this.items=s.loadInventory().map(e=>({...e,image:r.images[e.imageKey]})),this.items.length>0&&(this.nextId=Math.max(...this.items.map(e=>e.id))),this.renderInventory()}ready(){n.on(d,this,e=>{const{imageKey:t}=e;if(this.items.some(i=>i.imageKey===t)){console.warn(`Item ${t} ist bereits im Inventar`);return}this.nextId+=1,this.items.push({id:this.nextId,image:r.images[t],imageKey:t}),s.saveInventory(this.items.map(i=>({id:i.id,imageKey:i.imageKey}))),this.renderInventory()}),n.on(h,this,e=>{const{imageKey:t}=e;this.removeFromInventory(t)})}renderInventory(){this.children.forEach(e=>e.destroy()),this.items.forEach((e,t)=>{const o=new I({resource:r.images[e.imageKey],position:new m(t*12,0)});this.addChild(o)})}removeFromInventory(e){this.items=this.items.filter(t=>t.imageKey!==e),this.renderInventory()}}
