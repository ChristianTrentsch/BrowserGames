"use strict";export const LEFT="LEFT",RIGHT="RIGHT",UP="UP",DOWN="DOWN",SPACE="SPACE",ITEM1="ITEM1",ITEM2="ITEM2",RELOAD="RELOAD",ATTACK="ATTACK";export class Input{constructor(){this.heldDirections=[],this.keys={ArrowLeft:!1,ArrowRight:!1,ArrowUp:!1,ArrowDown:!1,KeyW:!1,KeyA:!1,KeyS:!1,KeyD:!1,Space:!1,KeyE:!1,KeyR:!1,KeyQ:!1,KeyF:!1},this.lastKeys={...this.keys};const t={ArrowLeft:LEFT,ArrowRight:RIGHT,ArrowUp:UP,ArrowDown:DOWN,KeyA:LEFT,KeyD:RIGHT,KeyW:UP,KeyS:DOWN,Space:SPACE,KeyE:ITEM1,KeyQ:ITEM2,KeyR:RELOAD,KeyF:ATTACK};document.addEventListener("keydown",e=>{const o=e.code;[" ","ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].includes(e.key)&&e.preventDefault(),o in this.keys&&(this.keys[o]=!0,this.onArrowPressed(t[o]))}),document.addEventListener("keyup",e=>{const o=e.code;o in this.keys&&(this.keys[o]=!1,this.onArrowReleased(t[o]))})}get direction(){return this.heldDirections[0]}update(){this.lastKeys={...this.keys}}getActionJustPressed(t){let e=!1;return this.keys[t]&&!this.lastKeys[t]&&(e=!0),e}onArrowPressed(t){this.heldDirections.indexOf(t)===-1&&this.heldDirections.unshift(t)}onArrowReleased(t){const e=this.heldDirections.indexOf(t);e!==-1&&this.heldDirections.splice(e,1)}}
